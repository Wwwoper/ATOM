name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production
      version:
        description: 'Version to deploy (tag or branch)'
        required: true
        default: 'main'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/ATOM && \
            git fetch --all && \
            git checkout ${{ github.event.inputs.version }} && \
            
            # Останавливаем и удаляем контейнеры
            docker compose -f /home/ATOM/docker-compose.yml --env-file /home/ATOM/.env.prod down -v && \
            docker system prune -f && \
            
            # Собираем и запускаем контейнеры с явным указанием файла переменных
            docker compose -f /home/ATOM/docker-compose.yml --env-file /home/ATOM/.env.prod build --no-cache && \
            docker compose -f /home/ATOM/docker-compose.yml --env-file /home/ATOM/.env.prod up -d && \
            
            # Ждем готовности web-сервиса
            echo 'Waiting for web service to be ready...' && \
            timeout 120 bash -c 'until docker compose -f /home/ATOM/docker-compose.yml --env-file /home/ATOM/.env.prod ps web | grep -q "Up"; do 
              echo "Waiting for web service..." && \
              sleep 5
            done' && \
            
            # Даем время на инициализацию
            sleep 10 && \
            
            # Выполняем миграции и сбор статики
            docker compose -f /home/ATOM/docker-compose.yml --env-file /home/ATOM/.env.prod exec -T web python /app/atom/manage.py migrate --noinput && \
            docker compose -f /home/ATOM/docker-compose.yml --env-file /home/ATOM/.env.prod exec -T web python /app/atom/manage.py collectstatic --noinput --clear && \
            docker image prune -f

      - name: Health check
        env:
          HEALTH_CHECK_URL: ${{ secrets.HEALTH_CHECK_URL }}
        run: |
          echo "Waiting for services to start..."
          sleep 15
          
          MAX_RETRIES=5
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl --fail "$HEALTH_CHECK_URL"; then
              echo "Health check passed!"
              exit 0
            fi
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "Health check failed. Retry $RETRY_COUNT of $MAX_RETRIES"
            sleep 10
          done
          
          echo "Health check failed after $MAX_RETRIES attempts"
          exit 1
