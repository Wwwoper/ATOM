name: Django CI/CD

on:
  pull_request:
    branches: [ main, production ]
  push:
    branches: [ main, production ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: atom_db
          POSTGRES_USER: atom_user
          POSTGRES_PASSWORD: 87408740
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/base.txt
        pip install -r requirements/dev.txt
        pip install -r requirements/prod.txt
        pip install pytest pytest-django
        
    - name: Setup CI environment
      run: |
        echo "DEBUG=True
        SECRET_KEY=django-insecure-ci-key-123456789
        ALLOWED_HOSTS=localhost,127.0.0.1
        CSRF_TRUSTED_ORIGINS=http://localhost:8081,https://localhost:8081

        DB_ENGINE=django.db.backends.postgresql
        DB_NAME=atom_db
        DB_USER=atom_user
        DB_PASSWORD=87408740
        DB_HOST=localhost
        DB_PORT=5432

        STATIC_URL=/static/
        MEDIA_URL=/media/
        STATIC_ROOT=/app/atom/static
        MEDIA_ROOT=/app/atom/media

        CSRF_COOKIE_SECURE=False
        SESSION_COOKIE_SECURE=False
        SECURE_SSL_REDIRECT=False
        SECURE_HSTS_SECONDS=0
        SECURE_HSTS_INCLUDE_SUBDOMAINS=False
        SECURE_HSTS_PRELOAD=False

        API_VERSION=v1

        CSRF_USE_SESSIONS=False
        CSRF_COOKIE_HTTPONLY=False" > atom/.env.ci
        
    - name: Run Tests
      env:
        DJANGO_ENV: ci
      run: |
        cd atom
        pytest -v

  create_release:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/production'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Get current date
      id: date
      run: echo "date=$(date +'%d.%m.%Y')" >> $GITHUB_OUTPUT
    
    - name: Get latest tag
      id: latest_tag
      run: |
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
    
    - name: Generate new version
      id: version
      run: |
        latest_version=${latest_tag#v}
        IFS='.' read -r major minor patch <<< "$latest_version"
        new_version="v$major.$minor.$((patch + 1))"
        echo "new_version=$new_version" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.new_version }}
        release_name: Релиз ${{ steps.version.outputs.new_version }} от ${{ steps.date.outputs.date }}
        body: |
          # Релиз ${{ steps.version.outputs.new_version }}
          
          **Дата выпуска:** ${{ steps.date.outputs.date }}
          
          ## Изменения в этой версии:
          ${{ github.event.head_commit.message }}
          
          ---
          Релиз создан автоматически при слиянии в ветку main.
        draft: false
        prerelease: false 